<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Animated Blackjack Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
           
        }
        .game-container {
            background-color: #34495e;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            color: white;
            box-shadow: 0 10px 20px rgba(0,0,0,0.
            height: 350px;
            margin: 20px auto;
           
            height: 140px;
            margin: 0 10px;
            position: relative;
            transition: transform 0.6s;
            transform-style: preserve-3d;
        }
        .card-face {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            font-weight: bold;
        }
        .card-front {
            background-color: whitesmoke;
            color: red;
        }
        .card-back {
            background-color: #2980b9;
            transform: rotateY(180deg);
        }
        .card.flipped {
            transform: rotateY(180deg);
        }
        button {
            margin: 10px;
            padding: 12px 24px;
            font-size: 18px;
            cursor: pointer;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s, transform 0.1s;
        }
        button:hover {
            background-color: #2980b9;
        }
        button:active {
            transform: scale(0.98);
        }
        #result {
            font-size: 28px;
            font-weight: bold;
            margin: 20px 0;
            opacity: 0;
            transform: translateY(-20px);
            transition: opacity 0.5s, transform 0.5s;
        }
        #result.show {
            opacity: 1;
            transform: translateY(0);
        }
        .score {
            position: absolute;
            font-size: 24px;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        #dealer-score {
            top: 180px;
            left: 20px;
        }
        #player-score {
            bottom: 180px;
            right: 20px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Blackjack</h1>
        <div class="table">
            <div id="dealer-hand" class="hand"></div>
            <div id="player-hand" class="hand"></div>
            <div id="dealer-score" class="score"></div>
            <div id="player-score" class="score"></div>
        </div>
        <div id="result"></div>
        <button id="hit">Hit</button>
        <button id="stand">Stand</button>
        <button id="new-game">New Game</button>
    </div>

    <script>
        const dealerHandEl = document.getElementById('dealer-hand');
        const playerHandEl = document.getElementById('player-hand');
        const resultEl = document.getElementById('result');
        const hitBtn = document.getElementById('hit');
        const standBtn = document.getElementById('stand');
        const newGameBtn = document.getElementById('new-game');
        const dealerScoreEl = document.getElementById('dealer-score');
        const playerScoreEl = document.getElementById('player-score');

        let deck = [];
        let dealerHand = [];
        let playerHand = [];
        let gameOver = false;

        function createDeck() {
            const suits = ['♠', '♥', '♦', '♣'];
            const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
            deck = [];
            for (let suit of suits) {
                for (let value of values) {
                    deck.push({ suit, value });
                }
            }
        }

        function shuffleDeck() {
            for (let i = deck.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [deck[i], deck[j]] = [deck[j], deck[i]];
            }
        }

        function dealCard() {
            return deck.pop();
        }

        function calculateHandValue(hand) {
            let value = 0;
            let aceCount = 0;
            for (let card of hand) {
                if (card.value === 'A') {
                    aceCount++;
                    value += 11;
                } else if (['K', 'Q', 'J'].includes(card.value)) {
                    value += 10;
                } else {
                    value += parseInt(card.value);
                }
            }
            while (value > 21 && aceCount > 0) {
                value -= 10;
                aceCount--;
            }
            return value;
        }

        function createCardElement(card, isDealer = false, isHidden = false) {
            const cardEl = document.createElement('div');
            cardEl.className = 'card' + (isHidden ? ' flipped' : '');

            const frontFace = document.createElement('div');
            frontFace.className = 'card-face card-front';
            frontFace.textContent = `${card.value}${card.suit}`;
            if (card.suit === '♥' || card.suit === '♦') {
                frontFace.style.color = 'red';
            }

            const backFace = document.createElement('div');
            backFace.className = 'card-face card-back';
            backFace.textContent = '?';

            cardEl.appendChild(frontFace);
            cardEl.appendChild(backFace);

            return cardEl;
        }

        function updateHands(revealDealerHand = false) {
            dealerHandEl.innerHTML = '';
            playerHandEl.innerHTML = '';

            dealerHand.forEach((card, index) => {
                const cardEl = createCardElement(card, true, index === 0 && !revealDealerHand);
                dealerHandEl.appendChild(cardEl);
                setTimeout(() => cardEl.style.opacity = 1, 50 * index);
            });

            playerHand.forEach((card, index) => {
                const cardEl = createCardElement(card);
                playerHandEl.appendChild(cardEl);
                setTimeout(() => cardEl.style.opacity = 1, 50 * index);
            });

            updateScores(revealDealerHand);
        }

        function updateScores(revealDealerHand) {
            const playerValue = calculateHandValue(playerHand);
            playerScoreEl.textContent = `Your Score: ${playerValue}`;

            if (revealDealerHand) {
                const dealerValue = calculateHandValue(dealerHand);
                dealerScoreEl.textContent = `Dealer Score: ${dealerValue}`;
            } else {
                dealerScoreEl.textContent = 'Dealer Score: ?';
            }
        }

        function startNewGame() {
            createDeck();
            shuffleDeck();
            dealerHand = [dealCard(), dealCard()];
            playerHand = [dealCard(), dealCard()];
            gameOver = false;
            updateHands();
            resultEl.textContent = '';
            resultEl.classList.remove('show');
            hitBtn.disabled = false;
            standBtn.disabled = false;
        }

        function hit() {
            if (!gameOver) {
                playerHand.push(dealCard());
                updateHands();
                if (calculateHandValue(playerHand) > 21) {
                    endGame('You busted! Dealer wins.');
                }
            }
        }

        function stand() {
            if (!gameOver) {
                while (calculateHandValue(dealerHand) < 17) {
                    dealerHand.push(dealCard());
                }
                updateHands(true);
                const playerValue = calculateHandValue(playerHand);
                const dealerValue = calculateHandValue(dealerHand);
                if (dealerValue > 21) {
                    endGame('Dealer busted! You win!');
                } else if (playerValue > dealerValue) {
                    endGame('You win!');
                } else if (playerValue < dealerValue) {
                    endGame('Dealer wins!');
                } else {
                    endGame('It\'s a tie!');
                }
            }
        }

        function endGame(message) {
            resultEl.textContent = message;
            resultEl.classList.add('show');
            gameOver = true;
            hitBtn.disabled = true;
            standBtn.disabled = true;
            updateHands(true);
        }

        hitBtn.addEventListener('click', hit);
        standBtn.addEventListener('click', stand);
        newGameBtn.addEventListener('click', startNewGame);

        startNewGame();
    </script>
</body>
</html>

